How to work with git?
mkdir workspace
cd workspace
git init
#it will initialize git and empty structure under .git folder.

When we initialize git below 3 phases will be created.

1.working directory
2.staging area
3.local repository


Configuration:

We are telling git about who created, what changed.

we do 3 types of configuration

1.system level
   /etc/gitconfig
   
   git config --system

2.user

  ~/.gitconfig or /home/ramesh/.gitconfig
  
    git config --global
  
3.project level

 .git/config
 git config
 
 user level configuration:
 
  git config --global user.name "ramesh"
  git config --global user.mail "ram.btp68@gmail.com"
  git config --global core.editor "vim"
 
 
 ===============
 
 1.cd workspace
   touch git_file
   git add .  # file will move to staging area
   git status # It will show us status of the file
   git commit -m "Git file added" # this will move the file from staging to local repository.
   (or)
   how to add and commit a file in a single step?
   git commit -am "commit message"  # This will be applicable only existed files only.If use this command with new file then you will get an error.If you want to add new file then you must use git add . and then git commit -m "message" only.
   git log
   git log --oneline
   git log --author="ramesh"
   git log --grep="string to search in commit messages"
   git log --since "1hr"
   git log --until=2017-08-09"
   git show commit_id # it is used to see the content of that commit id.
   git checkout commit_id ## to go into specified file changes with this commit id
   
 git does not track empty files.
   
   git diff commit_id1..commit_id2 # To see difference between commit to commit.
   
 how to change commit message?
 
 This will be applicable only for latest commit id only.
 
 git commit --amend -m "new commit message"
 
 if you want to change commit message and also add modified other file into same commit id then we use.
 
 test3 here is modified file. new commit message is changing latest commit id message with new.
 
 git commit --amend -m "new commit message" test3
   
==========================================================
Branches:

git branch #it will display list of branches which are created by developers. if branch having * as prefix it means that it is current branch.
git branch <branch name> # it will create new branch.
git checkout branch name # it will go into specified branch.
git checkout -b <branch name> # It will create branch and go into specified branch.
git merge branch_name # to merge branch with master branch or if any parent branch with child branch.ex: To merger f1 branch with master then you should be in master branch.
git diff branch1..branch2 # it will display the difference between branch1 and branch2.
git branch -d branch_name # it is used to delete branch.if you want to delete f1 branch then you should be on master branch.
git branch -D branch_name # it is used to delete branch forcefully.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

git rm & git mv:

if you delete a file with just rm command. then you must add the change to stage and local repository as well.

rm file1
git status # It will show below 

Your branch is ahead of 'origin/master' by 8 commits.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    test.txt

no changes added to commit (use "git add" and/or "git commit -a")